/*
* generated by Xtext
*/
package org.xtext.featuremodel.parseTreeConstruction;

import org.eclipse.emf.ecore.*;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parsetree.reconstr.IEObjectConsumer;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor;

import org.xtext.featuremodel.services.FeatureModelGrammarAccess;

import com.google.inject.Inject;

@SuppressWarnings("all")
public class FeatureModelParsetreeConstructor extends AbstractParseTreeConstructor {
		
	@Inject
	private FeatureModelGrammarAccess grammarAccess;
	
	@Override
	protected AbstractToken getRootToken(IEObjectConsumer inst) {
		return new ThisRootNode(inst);	
	}
	
protected class ThisRootNode extends RootToken {
	public ThisRootNode(IEObjectConsumer inst) {
		super(inst);
	}
	
	@Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FeatureModel_Group(this, this, 0, inst);
			case 1: return new RootFeature_Group(this, this, 1, inst);
			case 2: return new Annotation_Group(this, this, 2, inst);
			case 3: return new Relationship_Alternatives(this, this, 3, inst);
			case 4: return new Mandatory_Alternatives(this, this, 4, inst);
			case 5: return new Optional_Alternatives(this, this, 5, inst);
			case 6: return new Alternative_Group(this, this, 6, inst);
			case 7: return new Inclusive_Or_Group(this, this, 7, inst);
			case 8: return new GroupCardinality_Group(this, this, 8, inst);
			case 9: return new Feature_Alternatives(this, this, 9, inst);
			case 10: return new Feature_Impl_Group(this, this, 10, inst);
			case 11: return new ReferenceFeature_Group(this, this, 11, inst);
			case 12: return new GroupedFeature_Group(this, this, 12, inst);
			case 13: return new GroupedReference_Group(this, this, 13, inst);
			default: return null;
		}	
	}	
}
	

/************ begin Rule FeatureModel ****************
 *
 * FeatureModel:
 * 	"<?xml version=\"1.0\" encoding=\"UTF-8\"?>" "<fm:FeatureModel fm:value=\"FeatureModel\""
 * 	"xmlns:fm=\"http://www.pnp-software.com/XFeature/fmm\"" "xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\""
 * 	"xsi:schemaLocation=\"http://www.pnp-software.com/XFeature/fmm ./FeatureModel.xfmm\">" containsRoot+=RootFeature+
 * 	"</fm:FeatureModel>";
 *
 **/

// "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" "<fm:FeatureModel fm:value=\"FeatureModel\""
// "xmlns:fm=\"http://www.pnp-software.com/XFeature/fmm\"" "xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\""
// "xsi:schemaLocation=\"http://www.pnp-software.com/XFeature/fmm ./FeatureModel.xfmm\">" containsRoot+=RootFeature+
// "</fm:FeatureModel>"
protected class FeatureModel_Group extends GroupToken {
	
	public FeatureModel_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getFeatureModelAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FeatureModel_FmFeatureModelKeyword_6(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getFeatureModelRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "<?xml version=\"1.0\" encoding=\"UTF-8\"?>"
protected class FeatureModel_XmlVersion10EncodingUTF8Keyword_0 extends KeywordToken  {
	
	public FeatureModel_XmlVersion10EncodingUTF8Keyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFeatureModelAccess().getXmlVersion10EncodingUTF8Keyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// "<fm:FeatureModel fm:value=\"FeatureModel\""
protected class FeatureModel_FmFeatureModelFmValueFeatureModelKeyword_1 extends KeywordToken  {
	
	public FeatureModel_FmFeatureModelFmValueFeatureModelKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFeatureModelAccess().getFmFeatureModelFmValueFeatureModelKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FeatureModel_XmlVersion10EncodingUTF8Keyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "xmlns:fm=\"http://www.pnp-software.com/XFeature/fmm\""
protected class FeatureModel_XmlnsFmHttpWwwPnpSoftwareComXFeatureFmmKeyword_2 extends KeywordToken  {
	
	public FeatureModel_XmlnsFmHttpWwwPnpSoftwareComXFeatureFmmKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFeatureModelAccess().getXmlnsFmHttpWwwPnpSoftwareComXFeatureFmmKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FeatureModel_FmFeatureModelFmValueFeatureModelKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\""
protected class FeatureModel_XmlnsXsiHttpWwwW3Org2001XMLSchemaInstanceKeyword_3 extends KeywordToken  {
	
	public FeatureModel_XmlnsXsiHttpWwwW3Org2001XMLSchemaInstanceKeyword_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFeatureModelAccess().getXmlnsXsiHttpWwwW3Org2001XMLSchemaInstanceKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FeatureModel_XmlnsFmHttpWwwPnpSoftwareComXFeatureFmmKeyword_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "xsi:schemaLocation=\"http://www.pnp-software.com/XFeature/fmm ./FeatureModel.xfmm\">"
protected class FeatureModel_XsiSchemaLocationHttpWwwPnpSoftwareComXFeatureFmmFeatureModelXfmmKeyword_4 extends KeywordToken  {
	
	public FeatureModel_XsiSchemaLocationHttpWwwPnpSoftwareComXFeatureFmmFeatureModelXfmmKeyword_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFeatureModelAccess().getXsiSchemaLocationHttpWwwPnpSoftwareComXFeatureFmmFeatureModelXfmmKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FeatureModel_XmlnsXsiHttpWwwW3Org2001XMLSchemaInstanceKeyword_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// containsRoot+=RootFeature+
protected class FeatureModel_ContainsRootAssignment_5 extends AssignmentToken  {
	
	public FeatureModel_ContainsRootAssignment_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFeatureModelAccess().getContainsRootAssignment_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RootFeature_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("containsRoot",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("containsRoot");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getRootFeatureRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getFeatureModelAccess().getContainsRootRootFeatureParserRuleCall_5_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new FeatureModel_ContainsRootAssignment_5(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new FeatureModel_XsiSchemaLocationHttpWwwPnpSoftwareComXFeatureFmmFeatureModelXfmmKeyword_4(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "</fm:FeatureModel>"
protected class FeatureModel_FmFeatureModelKeyword_6 extends KeywordToken  {
	
	public FeatureModel_FmFeatureModelKeyword_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFeatureModelAccess().getFmFeatureModelKeyword_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FeatureModel_ContainsRootAssignment_5(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule FeatureModel ****************/


/************ begin Rule RootFeature ****************
 *
 * RootFeature:
 * 	"<fm:RootFeature fm:value=" name=STRING ">" annotation+=Annotation* containsRelation+=Relationship*
 * 	containsFeature+=Feature* "</fm:RootFeature>";
 *
 **/

// "<fm:RootFeature fm:value=" name=STRING ">" annotation+=Annotation* containsRelation+=Relationship*
// containsFeature+=Feature* "</fm:RootFeature>"
protected class RootFeature_Group extends GroupToken {
	
	public RootFeature_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getRootFeatureAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RootFeature_FmRootFeatureKeyword_6(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getRootFeatureRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "<fm:RootFeature fm:value="
protected class RootFeature_FmRootFeatureFmValueKeyword_0 extends KeywordToken  {
	
	public RootFeature_FmRootFeatureFmValueKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getRootFeatureAccess().getFmRootFeatureFmValueKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// name=STRING
protected class RootFeature_NameAssignment_1 extends AssignmentToken  {
	
	public RootFeature_NameAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRootFeatureAccess().getNameAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RootFeature_FmRootFeatureFmValueKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getRootFeatureAccess().getNameSTRINGTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getRootFeatureAccess().getNameSTRINGTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// ">"
protected class RootFeature_GreaterThanSignKeyword_2 extends KeywordToken  {
	
	public RootFeature_GreaterThanSignKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getRootFeatureAccess().getGreaterThanSignKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RootFeature_NameAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// annotation+=Annotation*
protected class RootFeature_AnnotationAssignment_3 extends AssignmentToken  {
	
	public RootFeature_AnnotationAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRootFeatureAccess().getAnnotationAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Annotation_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("annotation",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("annotation");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAnnotationRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getRootFeatureAccess().getAnnotationAnnotationParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new RootFeature_AnnotationAssignment_3(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new RootFeature_GreaterThanSignKeyword_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// containsRelation+=Relationship*
protected class RootFeature_ContainsRelationAssignment_4 extends AssignmentToken  {
	
	public RootFeature_ContainsRelationAssignment_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRootFeatureAccess().getContainsRelationAssignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Relationship_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("containsRelation",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("containsRelation");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getRelationshipRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getRootFeatureAccess().getContainsRelationRelationshipParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new RootFeature_ContainsRelationAssignment_4(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new RootFeature_AnnotationAssignment_3(lastRuleCallOrigin, next, actIndex, consumed);
			case 2: return new RootFeature_GreaterThanSignKeyword_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// containsFeature+=Feature*
protected class RootFeature_ContainsFeatureAssignment_5 extends AssignmentToken  {
	
	public RootFeature_ContainsFeatureAssignment_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRootFeatureAccess().getContainsFeatureAssignment_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Feature_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("containsFeature",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("containsFeature");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFeatureRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getRootFeatureAccess().getContainsFeatureFeatureParserRuleCall_5_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new RootFeature_ContainsFeatureAssignment_5(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new RootFeature_ContainsRelationAssignment_4(lastRuleCallOrigin, next, actIndex, consumed);
			case 2: return new RootFeature_AnnotationAssignment_3(lastRuleCallOrigin, next, actIndex, consumed);
			case 3: return new RootFeature_GreaterThanSignKeyword_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "</fm:RootFeature>"
protected class RootFeature_FmRootFeatureKeyword_6 extends KeywordToken  {
	
	public RootFeature_FmRootFeatureKeyword_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getRootFeatureAccess().getFmRootFeatureKeyword_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RootFeature_ContainsFeatureAssignment_5(lastRuleCallOrigin, this, 0, inst);
			case 1: return new RootFeature_ContainsRelationAssignment_4(lastRuleCallOrigin, this, 1, inst);
			case 2: return new RootFeature_AnnotationAssignment_3(lastRuleCallOrigin, this, 2, inst);
			case 3: return new RootFeature_GreaterThanSignKeyword_2(lastRuleCallOrigin, this, 3, inst);
			default: return null;
		}	
	}

}


/************ end Rule RootFeature ****************/


/************ begin Rule Annotation ****************
 *
 * Annotation:
 * 	"<fm:Annotation fm:value=\"Annotation\">" "<fm:Description fm:value=" description=STRING "/>" "</fm:Annotation>";
 *
 **/

// "<fm:Annotation fm:value=\"Annotation\">" "<fm:Description fm:value=" description=STRING "/>" "</fm:Annotation>"
protected class Annotation_Group extends GroupToken {
	
	public Annotation_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAnnotationAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Annotation_FmAnnotationKeyword_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAnnotationRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "<fm:Annotation fm:value=\"Annotation\">"
protected class Annotation_FmAnnotationFmValueAnnotationKeyword_0 extends KeywordToken  {
	
	public Annotation_FmAnnotationFmValueAnnotationKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAnnotationAccess().getFmAnnotationFmValueAnnotationKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// "<fm:Description fm:value="
protected class Annotation_FmDescriptionFmValueKeyword_1 extends KeywordToken  {
	
	public Annotation_FmDescriptionFmValueKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAnnotationAccess().getFmDescriptionFmValueKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Annotation_FmAnnotationFmValueAnnotationKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// description=STRING
protected class Annotation_DescriptionAssignment_2 extends AssignmentToken  {
	
	public Annotation_DescriptionAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnnotationAccess().getDescriptionAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Annotation_FmDescriptionFmValueKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("description",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("description");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getAnnotationAccess().getDescriptionSTRINGTerminalRuleCall_2_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getAnnotationAccess().getDescriptionSTRINGTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// "/>"
protected class Annotation_SolidusGreaterThanSignKeyword_3 extends KeywordToken  {
	
	public Annotation_SolidusGreaterThanSignKeyword_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAnnotationAccess().getSolidusGreaterThanSignKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Annotation_DescriptionAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "</fm:Annotation>"
protected class Annotation_FmAnnotationKeyword_4 extends KeywordToken  {
	
	public Annotation_FmAnnotationKeyword_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAnnotationAccess().getFmAnnotationKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Annotation_SolidusGreaterThanSignKeyword_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule Annotation ****************/


/************ begin Rule Relationship ****************
 *
 * Relationship:
 * 	Mandatory | Optional | Alternative | Inclusive_Or | GroupCardinality;
 *
 **/

// Mandatory | Optional | Alternative | Inclusive_Or | GroupCardinality
protected class Relationship_Alternatives extends AlternativesToken {

	public Relationship_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getRelationshipAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Relationship_MandatoryParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Relationship_OptionalParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new Relationship_AlternativeParserRuleCall_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new Relationship_Inclusive_OrParserRuleCall_3(lastRuleCallOrigin, this, 3, inst);
			case 4: return new Relationship_GroupCardinalityParserRuleCall_4(lastRuleCallOrigin, this, 4, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAlternativeAccess().getAlternativeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getGroupCardinalityRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getInclusive_OrAccess().getInclusive_OrAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getMandatoryRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getOptionalRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// Mandatory
protected class Relationship_MandatoryParserRuleCall_0 extends RuleCallToken {
	
	public Relationship_MandatoryParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getRelationshipAccess().getMandatoryParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Mandatory_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getMandatoryRule().getType().getClassifier())
			return null;
		if(checkForRecursion(Mandatory_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// Optional
protected class Relationship_OptionalParserRuleCall_1 extends RuleCallToken {
	
	public Relationship_OptionalParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getRelationshipAccess().getOptionalParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Optional_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getOptionalRule().getType().getClassifier())
			return null;
		if(checkForRecursion(Optional_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// Alternative
protected class Relationship_AlternativeParserRuleCall_2 extends RuleCallToken {
	
	public Relationship_AlternativeParserRuleCall_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getRelationshipAccess().getAlternativeParserRuleCall_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Alternative_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAlternativeAccess().getAlternativeAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(Alternative_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// Inclusive_Or
protected class Relationship_Inclusive_OrParserRuleCall_3 extends RuleCallToken {
	
	public Relationship_Inclusive_OrParserRuleCall_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getRelationshipAccess().getInclusive_OrParserRuleCall_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Inclusive_Or_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getInclusive_OrAccess().getInclusive_OrAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(Inclusive_Or_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// GroupCardinality
protected class Relationship_GroupCardinalityParserRuleCall_4 extends RuleCallToken {
	
	public Relationship_GroupCardinalityParserRuleCall_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getRelationshipAccess().getGroupCardinalityParserRuleCall_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new GroupCardinality_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getGroupCardinalityRule().getType().getClassifier())
			return null;
		if(checkForRecursion(GroupCardinality_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule Relationship ****************/


/************ begin Rule Mandatory ****************
 *
 * Mandatory:
 * 	{Mandatory} "<fm:Cardinality fm:cardMax=" "\"1\"" "fm:cardMin=" "\"1\"" "/>" | "<fm:Cardinality fm:cardMax="
 * 	cardinalityMax=STRING "fm:cardMin=" cardinalityMin="1" "/>";
 *
 **/

// {Mandatory} "<fm:Cardinality fm:cardMax=" "\"1\"" "fm:cardMin=" "\"1\"" "/>" | "<fm:Cardinality fm:cardMax="
// cardinalityMax=STRING "fm:cardMin=" cardinalityMin="1" "/>"
protected class Mandatory_Alternatives extends AlternativesToken {

	public Mandatory_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getMandatoryAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Mandatory_Group_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Mandatory_Group_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getMandatoryRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {Mandatory} "<fm:Cardinality fm:cardMax=" "\"1\"" "fm:cardMin=" "\"1\"" "/>"
protected class Mandatory_Group_0 extends GroupToken {
	
	public Mandatory_Group_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getMandatoryAccess().getGroup_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Mandatory_SolidusGreaterThanSignKeyword_0_5(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// {Mandatory}
protected class Mandatory_MandatoryAction_0_0 extends ActionToken  {

	public Mandatory_MandatoryAction_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getMandatoryAccess().getMandatoryAction_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "<fm:Cardinality fm:cardMax="
protected class Mandatory_FmCardinalityFmCardMaxKeyword_0_1 extends KeywordToken  {
	
	public Mandatory_FmCardinalityFmCardMaxKeyword_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getMandatoryAccess().getFmCardinalityFmCardMaxKeyword_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Mandatory_MandatoryAction_0_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "\"1\""
protected class Mandatory_QuotationMarkDigitOneQuotationMarkKeyword_0_2 extends KeywordToken  {
	
	public Mandatory_QuotationMarkDigitOneQuotationMarkKeyword_0_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getMandatoryAccess().getQuotationMarkDigitOneQuotationMarkKeyword_0_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Mandatory_FmCardinalityFmCardMaxKeyword_0_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "fm:cardMin="
protected class Mandatory_FmCardMinKeyword_0_3 extends KeywordToken  {
	
	public Mandatory_FmCardMinKeyword_0_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getMandatoryAccess().getFmCardMinKeyword_0_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Mandatory_QuotationMarkDigitOneQuotationMarkKeyword_0_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "\"1\""
protected class Mandatory_QuotationMarkDigitOneQuotationMarkKeyword_0_4 extends KeywordToken  {
	
	public Mandatory_QuotationMarkDigitOneQuotationMarkKeyword_0_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getMandatoryAccess().getQuotationMarkDigitOneQuotationMarkKeyword_0_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Mandatory_FmCardMinKeyword_0_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "/>"
protected class Mandatory_SolidusGreaterThanSignKeyword_0_5 extends KeywordToken  {
	
	public Mandatory_SolidusGreaterThanSignKeyword_0_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getMandatoryAccess().getSolidusGreaterThanSignKeyword_0_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Mandatory_QuotationMarkDigitOneQuotationMarkKeyword_0_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// "<fm:Cardinality fm:cardMax=" cardinalityMax=STRING "fm:cardMin=" cardinalityMin="1" "/>"
protected class Mandatory_Group_1 extends GroupToken {
	
	public Mandatory_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getMandatoryAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Mandatory_SolidusGreaterThanSignKeyword_1_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "<fm:Cardinality fm:cardMax="
protected class Mandatory_FmCardinalityFmCardMaxKeyword_1_0 extends KeywordToken  {
	
	public Mandatory_FmCardinalityFmCardMaxKeyword_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getMandatoryAccess().getFmCardinalityFmCardMaxKeyword_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// cardinalityMax=STRING
protected class Mandatory_CardinalityMaxAssignment_1_1 extends AssignmentToken  {
	
	public Mandatory_CardinalityMaxAssignment_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMandatoryAccess().getCardinalityMaxAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Mandatory_FmCardinalityFmCardMaxKeyword_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("cardinalityMax",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("cardinalityMax");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getMandatoryAccess().getCardinalityMaxSTRINGTerminalRuleCall_1_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getMandatoryAccess().getCardinalityMaxSTRINGTerminalRuleCall_1_1_0();
			return obj;
		}
		return null;
	}

}

// "fm:cardMin="
protected class Mandatory_FmCardMinKeyword_1_2 extends KeywordToken  {
	
	public Mandatory_FmCardMinKeyword_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getMandatoryAccess().getFmCardMinKeyword_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Mandatory_CardinalityMaxAssignment_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// cardinalityMin="1"
protected class Mandatory_CardinalityMinAssignment_1_3 extends AssignmentToken  {
	
	public Mandatory_CardinalityMinAssignment_1_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMandatoryAccess().getCardinalityMinAssignment_1_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Mandatory_FmCardMinKeyword_1_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("cardinalityMin",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("cardinalityMin");
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getMandatoryAccess().getCardinalityMin1Keyword_1_3_0(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMandatoryAccess().getCardinalityMin1Keyword_1_3_0();
			return obj;
		}
		return null;
	}

}

// "/>"
protected class Mandatory_SolidusGreaterThanSignKeyword_1_4 extends KeywordToken  {
	
	public Mandatory_SolidusGreaterThanSignKeyword_1_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getMandatoryAccess().getSolidusGreaterThanSignKeyword_1_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Mandatory_CardinalityMinAssignment_1_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}



/************ end Rule Mandatory ****************/


/************ begin Rule Optional ****************
 *
 * Optional:
 * 	{Optional} "<fm:Cardinality fm:cardMax=" "\"1\"" "fm:cardMin=" "\"0\"" "/>" | "<fm:Cardinality fm:cardMax="
 * 	cardinalityMax=STRING "fm:cardMin=" cardinalityMin="0" "/>";
 *
 **/

// {Optional} "<fm:Cardinality fm:cardMax=" "\"1\"" "fm:cardMin=" "\"0\"" "/>" | "<fm:Cardinality fm:cardMax="
// cardinalityMax=STRING "fm:cardMin=" cardinalityMin="0" "/>"
protected class Optional_Alternatives extends AlternativesToken {

	public Optional_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getOptionalAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Optional_Group_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Optional_Group_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getOptionalRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {Optional} "<fm:Cardinality fm:cardMax=" "\"1\"" "fm:cardMin=" "\"0\"" "/>"
protected class Optional_Group_0 extends GroupToken {
	
	public Optional_Group_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getOptionalAccess().getGroup_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Optional_SolidusGreaterThanSignKeyword_0_5(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// {Optional}
protected class Optional_OptionalAction_0_0 extends ActionToken  {

	public Optional_OptionalAction_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getOptionalAccess().getOptionalAction_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "<fm:Cardinality fm:cardMax="
protected class Optional_FmCardinalityFmCardMaxKeyword_0_1 extends KeywordToken  {
	
	public Optional_FmCardinalityFmCardMaxKeyword_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getOptionalAccess().getFmCardinalityFmCardMaxKeyword_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Optional_OptionalAction_0_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "\"1\""
protected class Optional_QuotationMarkDigitOneQuotationMarkKeyword_0_2 extends KeywordToken  {
	
	public Optional_QuotationMarkDigitOneQuotationMarkKeyword_0_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getOptionalAccess().getQuotationMarkDigitOneQuotationMarkKeyword_0_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Optional_FmCardinalityFmCardMaxKeyword_0_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "fm:cardMin="
protected class Optional_FmCardMinKeyword_0_3 extends KeywordToken  {
	
	public Optional_FmCardMinKeyword_0_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getOptionalAccess().getFmCardMinKeyword_0_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Optional_QuotationMarkDigitOneQuotationMarkKeyword_0_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "\"0\""
protected class Optional_QuotationMarkDigitZeroQuotationMarkKeyword_0_4 extends KeywordToken  {
	
	public Optional_QuotationMarkDigitZeroQuotationMarkKeyword_0_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getOptionalAccess().getQuotationMarkDigitZeroQuotationMarkKeyword_0_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Optional_FmCardMinKeyword_0_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "/>"
protected class Optional_SolidusGreaterThanSignKeyword_0_5 extends KeywordToken  {
	
	public Optional_SolidusGreaterThanSignKeyword_0_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getOptionalAccess().getSolidusGreaterThanSignKeyword_0_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Optional_QuotationMarkDigitZeroQuotationMarkKeyword_0_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// "<fm:Cardinality fm:cardMax=" cardinalityMax=STRING "fm:cardMin=" cardinalityMin="0" "/>"
protected class Optional_Group_1 extends GroupToken {
	
	public Optional_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getOptionalAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Optional_SolidusGreaterThanSignKeyword_1_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "<fm:Cardinality fm:cardMax="
protected class Optional_FmCardinalityFmCardMaxKeyword_1_0 extends KeywordToken  {
	
	public Optional_FmCardinalityFmCardMaxKeyword_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getOptionalAccess().getFmCardinalityFmCardMaxKeyword_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// cardinalityMax=STRING
protected class Optional_CardinalityMaxAssignment_1_1 extends AssignmentToken  {
	
	public Optional_CardinalityMaxAssignment_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getOptionalAccess().getCardinalityMaxAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Optional_FmCardinalityFmCardMaxKeyword_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("cardinalityMax",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("cardinalityMax");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getOptionalAccess().getCardinalityMaxSTRINGTerminalRuleCall_1_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getOptionalAccess().getCardinalityMaxSTRINGTerminalRuleCall_1_1_0();
			return obj;
		}
		return null;
	}

}

// "fm:cardMin="
protected class Optional_FmCardMinKeyword_1_2 extends KeywordToken  {
	
	public Optional_FmCardMinKeyword_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getOptionalAccess().getFmCardMinKeyword_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Optional_CardinalityMaxAssignment_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// cardinalityMin="0"
protected class Optional_CardinalityMinAssignment_1_3 extends AssignmentToken  {
	
	public Optional_CardinalityMinAssignment_1_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getOptionalAccess().getCardinalityMinAssignment_1_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Optional_FmCardMinKeyword_1_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("cardinalityMin",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("cardinalityMin");
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getOptionalAccess().getCardinalityMin0Keyword_1_3_0(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getOptionalAccess().getCardinalityMin0Keyword_1_3_0();
			return obj;
		}
		return null;
	}

}

// "/>"
protected class Optional_SolidusGreaterThanSignKeyword_1_4 extends KeywordToken  {
	
	public Optional_SolidusGreaterThanSignKeyword_1_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getOptionalAccess().getSolidusGreaterThanSignKeyword_1_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Optional_CardinalityMinAssignment_1_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}



/************ end Rule Optional ****************/


/************ begin Rule Alternative ****************
 *
 * Alternative:
 * 	{Alternative} "<fm:CardinalityAlternative fm:cardMax=\"1\" fm:cardMin=\"1\"/>";
 *
 **/

// {Alternative} "<fm:CardinalityAlternative fm:cardMax=\"1\" fm:cardMin=\"1\"/>"
protected class Alternative_Group extends GroupToken {
	
	public Alternative_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAlternativeAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Alternative_FmCardinalityAlternativeFmCardMax1FmCardMin1Keyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAlternativeAccess().getAlternativeAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {Alternative}
protected class Alternative_AlternativeAction_0 extends ActionToken  {

	public Alternative_AlternativeAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getAlternativeAccess().getAlternativeAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "<fm:CardinalityAlternative fm:cardMax=\"1\" fm:cardMin=\"1\"/>"
protected class Alternative_FmCardinalityAlternativeFmCardMax1FmCardMin1Keyword_1 extends KeywordToken  {
	
	public Alternative_FmCardinalityAlternativeFmCardMax1FmCardMin1Keyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAlternativeAccess().getFmCardinalityAlternativeFmCardMax1FmCardMin1Keyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Alternative_AlternativeAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule Alternative ****************/


/************ begin Rule Inclusive_Or ****************
 *
 * Inclusive_Or:
 * 	{Inclusive_Or} ("<fm:CardinalityInclusiveOr fm:cardMax=\"n\" fm:cardMin=\"1\"/>" |
 * 	"<fm:CardinalityInclusiveOr fm:cardMax=\"*\" fm:cardMin=\"1\"/>");
 *
 **/

// {Inclusive_Or} ("<fm:CardinalityInclusiveOr fm:cardMax=\"n\" fm:cardMin=\"1\"/>" |
// "<fm:CardinalityInclusiveOr fm:cardMax=\"*\" fm:cardMin=\"1\"/>")
protected class Inclusive_Or_Group extends GroupToken {
	
	public Inclusive_Or_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getInclusive_OrAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Inclusive_Or_Alternatives_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getInclusive_OrAccess().getInclusive_OrAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {Inclusive_Or}
protected class Inclusive_Or_Inclusive_OrAction_0 extends ActionToken  {

	public Inclusive_Or_Inclusive_OrAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getInclusive_OrAccess().getInclusive_OrAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "<fm:CardinalityInclusiveOr fm:cardMax=\"n\" fm:cardMin=\"1\"/>" |
// "<fm:CardinalityInclusiveOr fm:cardMax=\"*\" fm:cardMin=\"1\"/>"
protected class Inclusive_Or_Alternatives_1 extends AlternativesToken {

	public Inclusive_Or_Alternatives_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getInclusive_OrAccess().getAlternatives_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Inclusive_Or_FmCardinalityInclusiveOrFmCardMaxNFmCardMin1Keyword_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "<fm:CardinalityInclusiveOr fm:cardMax=\"n\" fm:cardMin=\"1\"/>"
protected class Inclusive_Or_FmCardinalityInclusiveOrFmCardMaxNFmCardMin1Keyword_1_0 extends KeywordToken  {
	
	public Inclusive_Or_FmCardinalityInclusiveOrFmCardMaxNFmCardMin1Keyword_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getInclusive_OrAccess().getFmCardinalityInclusiveOrFmCardMaxNFmCardMin1Keyword_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Inclusive_Or_Inclusive_OrAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}



/************ end Rule Inclusive_Or ****************/


/************ begin Rule GroupCardinality ****************
 *
 * GroupCardinality:
 * 	"<fm:FeatureGroup fm:value=\"FeatureGroup\">" "<fm:Cardinality fm:cardMax=" cardinalityMax=STRING "fm:cardMin="
 * 	cardinalityMin=STRING "/>" "<fm:GroupedFeatures fm:value=" target+=[GroupedFeature|STRING] (","
 * 	target+=[GroupedFeature|STRING])* "/>";
 *
 **/

// "<fm:FeatureGroup fm:value=\"FeatureGroup\">" "<fm:Cardinality fm:cardMax=" cardinalityMax=STRING "fm:cardMin="
// cardinalityMin=STRING "/>" "<fm:GroupedFeatures fm:value=" target+=[GroupedFeature|STRING] (","
// target+=[GroupedFeature|STRING])* "/>"
protected class GroupCardinality_Group extends GroupToken {
	
	public GroupCardinality_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getGroupCardinalityAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new GroupCardinality_SolidusGreaterThanSignKeyword_9(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getGroupCardinalityRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "<fm:FeatureGroup fm:value=\"FeatureGroup\">"
protected class GroupCardinality_FmFeatureGroupFmValueFeatureGroupKeyword_0 extends KeywordToken  {
	
	public GroupCardinality_FmFeatureGroupFmValueFeatureGroupKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getGroupCardinalityAccess().getFmFeatureGroupFmValueFeatureGroupKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// "<fm:Cardinality fm:cardMax="
protected class GroupCardinality_FmCardinalityFmCardMaxKeyword_1 extends KeywordToken  {
	
	public GroupCardinality_FmCardinalityFmCardMaxKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getGroupCardinalityAccess().getFmCardinalityFmCardMaxKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new GroupCardinality_FmFeatureGroupFmValueFeatureGroupKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// cardinalityMax=STRING
protected class GroupCardinality_CardinalityMaxAssignment_2 extends AssignmentToken  {
	
	public GroupCardinality_CardinalityMaxAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getGroupCardinalityAccess().getCardinalityMaxAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new GroupCardinality_FmCardinalityFmCardMaxKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("cardinalityMax",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("cardinalityMax");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getGroupCardinalityAccess().getCardinalityMaxSTRINGTerminalRuleCall_2_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getGroupCardinalityAccess().getCardinalityMaxSTRINGTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// "fm:cardMin="
protected class GroupCardinality_FmCardMinKeyword_3 extends KeywordToken  {
	
	public GroupCardinality_FmCardMinKeyword_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getGroupCardinalityAccess().getFmCardMinKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new GroupCardinality_CardinalityMaxAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// cardinalityMin=STRING
protected class GroupCardinality_CardinalityMinAssignment_4 extends AssignmentToken  {
	
	public GroupCardinality_CardinalityMinAssignment_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getGroupCardinalityAccess().getCardinalityMinAssignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new GroupCardinality_FmCardMinKeyword_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("cardinalityMin",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("cardinalityMin");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getGroupCardinalityAccess().getCardinalityMinSTRINGTerminalRuleCall_4_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getGroupCardinalityAccess().getCardinalityMinSTRINGTerminalRuleCall_4_0();
			return obj;
		}
		return null;
	}

}

// "/>"
protected class GroupCardinality_SolidusGreaterThanSignKeyword_5 extends KeywordToken  {
	
	public GroupCardinality_SolidusGreaterThanSignKeyword_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getGroupCardinalityAccess().getSolidusGreaterThanSignKeyword_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new GroupCardinality_CardinalityMinAssignment_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "<fm:GroupedFeatures fm:value="
protected class GroupCardinality_FmGroupedFeaturesFmValueKeyword_6 extends KeywordToken  {
	
	public GroupCardinality_FmGroupedFeaturesFmValueKeyword_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getGroupCardinalityAccess().getFmGroupedFeaturesFmValueKeyword_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new GroupCardinality_SolidusGreaterThanSignKeyword_5(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// target+=[GroupedFeature|STRING]
protected class GroupCardinality_TargetAssignment_7 extends AssignmentToken  {
	
	public GroupCardinality_TargetAssignment_7(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getGroupCardinalityAccess().getTargetAssignment_7();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new GroupCardinality_FmGroupedFeaturesFmValueKeyword_6(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("target",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("target");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getGroupCardinalityAccess().getTargetGroupedFeatureCrossReference_7_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getGroupCardinalityAccess().getTargetGroupedFeatureCrossReference_7_0(); 
				return obj;
			}
		}
		return null;
	}

}

// ("," target+=[GroupedFeature|STRING])*
protected class GroupCardinality_Group_8 extends GroupToken {
	
	public GroupCardinality_Group_8(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getGroupCardinalityAccess().getGroup_8();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new GroupCardinality_TargetAssignment_8_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ","
protected class GroupCardinality_CommaKeyword_8_0 extends KeywordToken  {
	
	public GroupCardinality_CommaKeyword_8_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getGroupCardinalityAccess().getCommaKeyword_8_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new GroupCardinality_Group_8(lastRuleCallOrigin, this, 0, inst);
			case 1: return new GroupCardinality_TargetAssignment_7(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// target+=[GroupedFeature|STRING]
protected class GroupCardinality_TargetAssignment_8_1 extends AssignmentToken  {
	
	public GroupCardinality_TargetAssignment_8_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getGroupCardinalityAccess().getTargetAssignment_8_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new GroupCardinality_CommaKeyword_8_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("target",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("target");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getGroupCardinalityAccess().getTargetGroupedFeatureCrossReference_8_1_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getGroupCardinalityAccess().getTargetGroupedFeatureCrossReference_8_1_0(); 
				return obj;
			}
		}
		return null;
	}

}


// "/>"
protected class GroupCardinality_SolidusGreaterThanSignKeyword_9 extends KeywordToken  {
	
	public GroupCardinality_SolidusGreaterThanSignKeyword_9(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getGroupCardinalityAccess().getSolidusGreaterThanSignKeyword_9();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new GroupCardinality_Group_8(lastRuleCallOrigin, this, 0, inst);
			case 1: return new GroupCardinality_TargetAssignment_7(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule GroupCardinality ****************/


/************ begin Rule Feature ****************
 *
 * Feature:
 * 	Feature_Impl | ReferenceFeature | GroupedFeature | GroupedReference;
 *
 **/

// Feature_Impl | ReferenceFeature | GroupedFeature | GroupedReference
protected class Feature_Alternatives extends AlternativesToken {

	public Feature_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getFeatureAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Feature_Feature_ImplParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Feature_ReferenceFeatureParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new Feature_GroupedFeatureParserRuleCall_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new Feature_GroupedReferenceParserRuleCall_3(lastRuleCallOrigin, this, 3, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getFeature_ImplRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getGroupedFeatureRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getGroupedReferenceRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getReferenceFeatureRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// Feature_Impl
protected class Feature_Feature_ImplParserRuleCall_0 extends RuleCallToken {
	
	public Feature_Feature_ImplParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getFeatureAccess().getFeature_ImplParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Feature_Impl_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getFeature_ImplRule().getType().getClassifier())
			return null;
		if(checkForRecursion(Feature_Impl_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ReferenceFeature
protected class Feature_ReferenceFeatureParserRuleCall_1 extends RuleCallToken {
	
	public Feature_ReferenceFeatureParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getFeatureAccess().getReferenceFeatureParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ReferenceFeature_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getReferenceFeatureRule().getType().getClassifier())
			return null;
		if(checkForRecursion(ReferenceFeature_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// GroupedFeature
protected class Feature_GroupedFeatureParserRuleCall_2 extends RuleCallToken {
	
	public Feature_GroupedFeatureParserRuleCall_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getFeatureAccess().getGroupedFeatureParserRuleCall_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new GroupedFeature_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getGroupedFeatureRule().getType().getClassifier())
			return null;
		if(checkForRecursion(GroupedFeature_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// GroupedReference
protected class Feature_GroupedReferenceParserRuleCall_3 extends RuleCallToken {
	
	public Feature_GroupedReferenceParserRuleCall_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getFeatureAccess().getGroupedReferenceParserRuleCall_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new GroupedReference_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getGroupedReferenceRule().getType().getClassifier())
			return null;
		if(checkForRecursion(GroupedReference_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule Feature ****************/


/************ begin Rule Feature_Impl ****************
 *
 * Feature_Impl returns Feature:
 * 	"<fm:SolitaryFeature fm:value=" name=STRING ">" annotation+=Annotation* containsRelation+=Relationship*
 * 	containsFeature+=Feature* "</fm:SolitaryFeature>";
 *
 **/

// "<fm:SolitaryFeature fm:value=" name=STRING ">" annotation+=Annotation* containsRelation+=Relationship*
// containsFeature+=Feature* "</fm:SolitaryFeature>"
protected class Feature_Impl_Group extends GroupToken {
	
	public Feature_Impl_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getFeature_ImplAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Feature_Impl_FmSolitaryFeatureKeyword_6(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getFeature_ImplRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "<fm:SolitaryFeature fm:value="
protected class Feature_Impl_FmSolitaryFeatureFmValueKeyword_0 extends KeywordToken  {
	
	public Feature_Impl_FmSolitaryFeatureFmValueKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFeature_ImplAccess().getFmSolitaryFeatureFmValueKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// name=STRING
protected class Feature_Impl_NameAssignment_1 extends AssignmentToken  {
	
	public Feature_Impl_NameAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFeature_ImplAccess().getNameAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Feature_Impl_FmSolitaryFeatureFmValueKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getFeature_ImplAccess().getNameSTRINGTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getFeature_ImplAccess().getNameSTRINGTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// ">"
protected class Feature_Impl_GreaterThanSignKeyword_2 extends KeywordToken  {
	
	public Feature_Impl_GreaterThanSignKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFeature_ImplAccess().getGreaterThanSignKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Feature_Impl_NameAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// annotation+=Annotation*
protected class Feature_Impl_AnnotationAssignment_3 extends AssignmentToken  {
	
	public Feature_Impl_AnnotationAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFeature_ImplAccess().getAnnotationAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Annotation_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("annotation",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("annotation");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAnnotationRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getFeature_ImplAccess().getAnnotationAnnotationParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Feature_Impl_AnnotationAssignment_3(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new Feature_Impl_GreaterThanSignKeyword_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// containsRelation+=Relationship*
protected class Feature_Impl_ContainsRelationAssignment_4 extends AssignmentToken  {
	
	public Feature_Impl_ContainsRelationAssignment_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFeature_ImplAccess().getContainsRelationAssignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Relationship_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("containsRelation",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("containsRelation");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getRelationshipRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getFeature_ImplAccess().getContainsRelationRelationshipParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Feature_Impl_ContainsRelationAssignment_4(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new Feature_Impl_AnnotationAssignment_3(lastRuleCallOrigin, next, actIndex, consumed);
			case 2: return new Feature_Impl_GreaterThanSignKeyword_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// containsFeature+=Feature*
protected class Feature_Impl_ContainsFeatureAssignment_5 extends AssignmentToken  {
	
	public Feature_Impl_ContainsFeatureAssignment_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFeature_ImplAccess().getContainsFeatureAssignment_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Feature_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("containsFeature",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("containsFeature");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFeatureRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getFeature_ImplAccess().getContainsFeatureFeatureParserRuleCall_5_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Feature_Impl_ContainsFeatureAssignment_5(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new Feature_Impl_ContainsRelationAssignment_4(lastRuleCallOrigin, next, actIndex, consumed);
			case 2: return new Feature_Impl_AnnotationAssignment_3(lastRuleCallOrigin, next, actIndex, consumed);
			case 3: return new Feature_Impl_GreaterThanSignKeyword_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "</fm:SolitaryFeature>"
protected class Feature_Impl_FmSolitaryFeatureKeyword_6 extends KeywordToken  {
	
	public Feature_Impl_FmSolitaryFeatureKeyword_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFeature_ImplAccess().getFmSolitaryFeatureKeyword_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Feature_Impl_ContainsFeatureAssignment_5(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Feature_Impl_ContainsRelationAssignment_4(lastRuleCallOrigin, this, 1, inst);
			case 2: return new Feature_Impl_AnnotationAssignment_3(lastRuleCallOrigin, this, 2, inst);
			case 3: return new Feature_Impl_GreaterThanSignKeyword_2(lastRuleCallOrigin, this, 3, inst);
			default: return null;
		}	
	}

}


/************ end Rule Feature_Impl ****************/


/************ begin Rule ReferenceFeature ****************
 *
 * ReferenceFeature:
 * 	"<fm:SolitaryReference fm:value=" name=STRING ">" annotation+=Annotation* containsRelation+=Relationship*
 * 	containsFeature+=Feature* "</fm:SolitaryReference>";
 *
 **/

// "<fm:SolitaryReference fm:value=" name=STRING ">" annotation+=Annotation* containsRelation+=Relationship*
// containsFeature+=Feature* "</fm:SolitaryReference>"
protected class ReferenceFeature_Group extends GroupToken {
	
	public ReferenceFeature_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getReferenceFeatureAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ReferenceFeature_FmSolitaryReferenceKeyword_6(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getReferenceFeatureRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "<fm:SolitaryReference fm:value="
protected class ReferenceFeature_FmSolitaryReferenceFmValueKeyword_0 extends KeywordToken  {
	
	public ReferenceFeature_FmSolitaryReferenceFmValueKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getReferenceFeatureAccess().getFmSolitaryReferenceFmValueKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// name=STRING
protected class ReferenceFeature_NameAssignment_1 extends AssignmentToken  {
	
	public ReferenceFeature_NameAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getReferenceFeatureAccess().getNameAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ReferenceFeature_FmSolitaryReferenceFmValueKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getReferenceFeatureAccess().getNameSTRINGTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getReferenceFeatureAccess().getNameSTRINGTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// ">"
protected class ReferenceFeature_GreaterThanSignKeyword_2 extends KeywordToken  {
	
	public ReferenceFeature_GreaterThanSignKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getReferenceFeatureAccess().getGreaterThanSignKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ReferenceFeature_NameAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// annotation+=Annotation*
protected class ReferenceFeature_AnnotationAssignment_3 extends AssignmentToken  {
	
	public ReferenceFeature_AnnotationAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getReferenceFeatureAccess().getAnnotationAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Annotation_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("annotation",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("annotation");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAnnotationRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getReferenceFeatureAccess().getAnnotationAnnotationParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ReferenceFeature_AnnotationAssignment_3(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new ReferenceFeature_GreaterThanSignKeyword_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// containsRelation+=Relationship*
protected class ReferenceFeature_ContainsRelationAssignment_4 extends AssignmentToken  {
	
	public ReferenceFeature_ContainsRelationAssignment_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getReferenceFeatureAccess().getContainsRelationAssignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Relationship_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("containsRelation",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("containsRelation");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getRelationshipRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getReferenceFeatureAccess().getContainsRelationRelationshipParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ReferenceFeature_ContainsRelationAssignment_4(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new ReferenceFeature_AnnotationAssignment_3(lastRuleCallOrigin, next, actIndex, consumed);
			case 2: return new ReferenceFeature_GreaterThanSignKeyword_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// containsFeature+=Feature*
protected class ReferenceFeature_ContainsFeatureAssignment_5 extends AssignmentToken  {
	
	public ReferenceFeature_ContainsFeatureAssignment_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getReferenceFeatureAccess().getContainsFeatureAssignment_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Feature_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("containsFeature",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("containsFeature");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFeatureRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getReferenceFeatureAccess().getContainsFeatureFeatureParserRuleCall_5_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ReferenceFeature_ContainsFeatureAssignment_5(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new ReferenceFeature_ContainsRelationAssignment_4(lastRuleCallOrigin, next, actIndex, consumed);
			case 2: return new ReferenceFeature_AnnotationAssignment_3(lastRuleCallOrigin, next, actIndex, consumed);
			case 3: return new ReferenceFeature_GreaterThanSignKeyword_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "</fm:SolitaryReference>"
protected class ReferenceFeature_FmSolitaryReferenceKeyword_6 extends KeywordToken  {
	
	public ReferenceFeature_FmSolitaryReferenceKeyword_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getReferenceFeatureAccess().getFmSolitaryReferenceKeyword_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ReferenceFeature_ContainsFeatureAssignment_5(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ReferenceFeature_ContainsRelationAssignment_4(lastRuleCallOrigin, this, 1, inst);
			case 2: return new ReferenceFeature_AnnotationAssignment_3(lastRuleCallOrigin, this, 2, inst);
			case 3: return new ReferenceFeature_GreaterThanSignKeyword_2(lastRuleCallOrigin, this, 3, inst);
			default: return null;
		}	
	}

}


/************ end Rule ReferenceFeature ****************/


/************ begin Rule GroupedFeature ****************
 *
 * GroupedFeature:
 * 	"<fm:GroupedFeature fm:value=" name=STRING ">" containsRelation+=Relationship* annotation+=Annotation*
 * 	containsFeature+=Feature* "</fm:GroupedFeature>" "</fm:FeatureGroup>"?;
 *
 **/

// "<fm:GroupedFeature fm:value=" name=STRING ">" containsRelation+=Relationship* annotation+=Annotation*
// containsFeature+=Feature* "</fm:GroupedFeature>" "</fm:FeatureGroup>"?
protected class GroupedFeature_Group extends GroupToken {
	
	public GroupedFeature_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getGroupedFeatureAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new GroupedFeature_FmGroupedFeatureKeyword_6(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getGroupedFeatureRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "<fm:GroupedFeature fm:value="
protected class GroupedFeature_FmGroupedFeatureFmValueKeyword_0 extends KeywordToken  {
	
	public GroupedFeature_FmGroupedFeatureFmValueKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getGroupedFeatureAccess().getFmGroupedFeatureFmValueKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// name=STRING
protected class GroupedFeature_NameAssignment_1 extends AssignmentToken  {
	
	public GroupedFeature_NameAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getGroupedFeatureAccess().getNameAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new GroupedFeature_FmGroupedFeatureFmValueKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getGroupedFeatureAccess().getNameSTRINGTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getGroupedFeatureAccess().getNameSTRINGTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// ">"
protected class GroupedFeature_GreaterThanSignKeyword_2 extends KeywordToken  {
	
	public GroupedFeature_GreaterThanSignKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getGroupedFeatureAccess().getGreaterThanSignKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new GroupedFeature_NameAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// containsRelation+=Relationship*
protected class GroupedFeature_ContainsRelationAssignment_3 extends AssignmentToken  {
	
	public GroupedFeature_ContainsRelationAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getGroupedFeatureAccess().getContainsRelationAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Relationship_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("containsRelation",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("containsRelation");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getRelationshipRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getGroupedFeatureAccess().getContainsRelationRelationshipParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new GroupedFeature_ContainsRelationAssignment_3(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new GroupedFeature_GreaterThanSignKeyword_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// annotation+=Annotation*
protected class GroupedFeature_AnnotationAssignment_4 extends AssignmentToken  {
	
	public GroupedFeature_AnnotationAssignment_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getGroupedFeatureAccess().getAnnotationAssignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Annotation_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("annotation",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("annotation");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAnnotationRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getGroupedFeatureAccess().getAnnotationAnnotationParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new GroupedFeature_AnnotationAssignment_4(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new GroupedFeature_ContainsRelationAssignment_3(lastRuleCallOrigin, next, actIndex, consumed);
			case 2: return new GroupedFeature_GreaterThanSignKeyword_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// containsFeature+=Feature*
protected class GroupedFeature_ContainsFeatureAssignment_5 extends AssignmentToken  {
	
	public GroupedFeature_ContainsFeatureAssignment_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getGroupedFeatureAccess().getContainsFeatureAssignment_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Feature_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("containsFeature",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("containsFeature");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFeatureRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getGroupedFeatureAccess().getContainsFeatureFeatureParserRuleCall_5_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new GroupedFeature_ContainsFeatureAssignment_5(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new GroupedFeature_AnnotationAssignment_4(lastRuleCallOrigin, next, actIndex, consumed);
			case 2: return new GroupedFeature_ContainsRelationAssignment_3(lastRuleCallOrigin, next, actIndex, consumed);
			case 3: return new GroupedFeature_GreaterThanSignKeyword_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "</fm:GroupedFeature>"
protected class GroupedFeature_FmGroupedFeatureKeyword_6 extends KeywordToken  {
	
	public GroupedFeature_FmGroupedFeatureKeyword_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getGroupedFeatureAccess().getFmGroupedFeatureKeyword_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new GroupedFeature_ContainsFeatureAssignment_5(lastRuleCallOrigin, this, 0, inst);
			case 1: return new GroupedFeature_AnnotationAssignment_4(lastRuleCallOrigin, this, 1, inst);
			case 2: return new GroupedFeature_ContainsRelationAssignment_3(lastRuleCallOrigin, this, 2, inst);
			case 3: return new GroupedFeature_GreaterThanSignKeyword_2(lastRuleCallOrigin, this, 3, inst);
			default: return null;
		}	
	}

}


/************ end Rule GroupedFeature ****************/


/************ begin Rule GroupedReference ****************
 *
 * GroupedReference:
 * 	"<fm:GroupedReference fm:value=" name=STRING ">" containsRelation+=Relationship* annotation+=Annotation*
 * 	containsFeature+=Feature* "</fm:GroupedReference>" "</fm:FeatureGroup>"?;
 *
 **/

// "<fm:GroupedReference fm:value=" name=STRING ">" containsRelation+=Relationship* annotation+=Annotation*
// containsFeature+=Feature* "</fm:GroupedReference>" "</fm:FeatureGroup>"?
protected class GroupedReference_Group extends GroupToken {
	
	public GroupedReference_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getGroupedReferenceAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new GroupedReference_FmGroupedReferenceKeyword_6(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getGroupedReferenceRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "<fm:GroupedReference fm:value="
protected class GroupedReference_FmGroupedReferenceFmValueKeyword_0 extends KeywordToken  {
	
	public GroupedReference_FmGroupedReferenceFmValueKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getGroupedReferenceAccess().getFmGroupedReferenceFmValueKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// name=STRING
protected class GroupedReference_NameAssignment_1 extends AssignmentToken  {
	
	public GroupedReference_NameAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getGroupedReferenceAccess().getNameAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new GroupedReference_FmGroupedReferenceFmValueKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getGroupedReferenceAccess().getNameSTRINGTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getGroupedReferenceAccess().getNameSTRINGTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// ">"
protected class GroupedReference_GreaterThanSignKeyword_2 extends KeywordToken  {
	
	public GroupedReference_GreaterThanSignKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getGroupedReferenceAccess().getGreaterThanSignKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new GroupedReference_NameAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// containsRelation+=Relationship*
protected class GroupedReference_ContainsRelationAssignment_3 extends AssignmentToken  {
	
	public GroupedReference_ContainsRelationAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getGroupedReferenceAccess().getContainsRelationAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Relationship_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("containsRelation",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("containsRelation");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getRelationshipRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getGroupedReferenceAccess().getContainsRelationRelationshipParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new GroupedReference_ContainsRelationAssignment_3(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new GroupedReference_GreaterThanSignKeyword_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// annotation+=Annotation*
protected class GroupedReference_AnnotationAssignment_4 extends AssignmentToken  {
	
	public GroupedReference_AnnotationAssignment_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getGroupedReferenceAccess().getAnnotationAssignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Annotation_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("annotation",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("annotation");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAnnotationRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getGroupedReferenceAccess().getAnnotationAnnotationParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new GroupedReference_AnnotationAssignment_4(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new GroupedReference_ContainsRelationAssignment_3(lastRuleCallOrigin, next, actIndex, consumed);
			case 2: return new GroupedReference_GreaterThanSignKeyword_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// containsFeature+=Feature*
protected class GroupedReference_ContainsFeatureAssignment_5 extends AssignmentToken  {
	
	public GroupedReference_ContainsFeatureAssignment_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getGroupedReferenceAccess().getContainsFeatureAssignment_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Feature_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("containsFeature",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("containsFeature");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFeatureRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getGroupedReferenceAccess().getContainsFeatureFeatureParserRuleCall_5_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new GroupedReference_ContainsFeatureAssignment_5(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new GroupedReference_AnnotationAssignment_4(lastRuleCallOrigin, next, actIndex, consumed);
			case 2: return new GroupedReference_ContainsRelationAssignment_3(lastRuleCallOrigin, next, actIndex, consumed);
			case 3: return new GroupedReference_GreaterThanSignKeyword_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "</fm:GroupedReference>"
protected class GroupedReference_FmGroupedReferenceKeyword_6 extends KeywordToken  {
	
	public GroupedReference_FmGroupedReferenceKeyword_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getGroupedReferenceAccess().getFmGroupedReferenceKeyword_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new GroupedReference_ContainsFeatureAssignment_5(lastRuleCallOrigin, this, 0, inst);
			case 1: return new GroupedReference_AnnotationAssignment_4(lastRuleCallOrigin, this, 1, inst);
			case 2: return new GroupedReference_ContainsRelationAssignment_3(lastRuleCallOrigin, this, 2, inst);
			case 3: return new GroupedReference_GreaterThanSignKeyword_2(lastRuleCallOrigin, this, 3, inst);
			default: return null;
		}	
	}

}


/************ end Rule GroupedReference ****************/

}
