/*
* generated by Xtext
*/

package org.xtext.featuremodel.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class FeatureModelGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class FeatureModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FeatureModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cXmlVersion10EncodingUTF8Keyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cFmFeatureModelFmValueFeatureModelKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cXmlnsFmHttpWwwPnpSoftwareComXFeatureFmmKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cXmlnsXsiHttpWwwW3Org2001XMLSchemaInstanceKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cXsiSchemaLocationHttpWwwPnpSoftwareComXFeatureFmmFeatureModelXfmmKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cContainsRootAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cContainsRootRootFeatureParserRuleCall_5_0 = (RuleCall)cContainsRootAssignment_5.eContents().get(0);
		private final Keyword cFmFeatureModelKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//FeatureModel:
		//	"<?xml version=\"1.0\" encoding=\"UTF-8\"?>" "<fm:FeatureModel fm:value=\"FeatureModel\""
		//	"xmlns:fm=\"http://www.pnp-software.com/XFeature/fmm\"" "xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\""
		//	"xsi:schemaLocation=\"http://www.pnp-software.com/XFeature/fmm ./FeatureModel.xfmm\">" containsRoot+=RootFeature+
		//	"</fm:FeatureModel>";
		public ParserRule getRule() { return rule; }

		//"<?xml version=\"1.0\" encoding=\"UTF-8\"?>" "<fm:FeatureModel fm:value=\"FeatureModel\""
		//"xmlns:fm=\"http://www.pnp-software.com/XFeature/fmm\"" "xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\""
		//"xsi:schemaLocation=\"http://www.pnp-software.com/XFeature/fmm ./FeatureModel.xfmm\">" containsRoot+=RootFeature+
		//"</fm:FeatureModel>"
		public Group getGroup() { return cGroup; }

		//"<?xml version=\"1.0\" encoding=\"UTF-8\"?>"
		public Keyword getXmlVersion10EncodingUTF8Keyword_0() { return cXmlVersion10EncodingUTF8Keyword_0; }

		//"<fm:FeatureModel fm:value=\"FeatureModel\""
		public Keyword getFmFeatureModelFmValueFeatureModelKeyword_1() { return cFmFeatureModelFmValueFeatureModelKeyword_1; }

		//"xmlns:fm=\"http://www.pnp-software.com/XFeature/fmm\""
		public Keyword getXmlnsFmHttpWwwPnpSoftwareComXFeatureFmmKeyword_2() { return cXmlnsFmHttpWwwPnpSoftwareComXFeatureFmmKeyword_2; }

		//"xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\""
		public Keyword getXmlnsXsiHttpWwwW3Org2001XMLSchemaInstanceKeyword_3() { return cXmlnsXsiHttpWwwW3Org2001XMLSchemaInstanceKeyword_3; }

		//"xsi:schemaLocation=\"http://www.pnp-software.com/XFeature/fmm ./FeatureModel.xfmm\">"
		public Keyword getXsiSchemaLocationHttpWwwPnpSoftwareComXFeatureFmmFeatureModelXfmmKeyword_4() { return cXsiSchemaLocationHttpWwwPnpSoftwareComXFeatureFmmFeatureModelXfmmKeyword_4; }

		//containsRoot+=RootFeature+
		public Assignment getContainsRootAssignment_5() { return cContainsRootAssignment_5; }

		//RootFeature
		public RuleCall getContainsRootRootFeatureParserRuleCall_5_0() { return cContainsRootRootFeatureParserRuleCall_5_0; }

		//"</fm:FeatureModel>"
		public Keyword getFmFeatureModelKeyword_6() { return cFmFeatureModelKeyword_6; }
	}

	public class RootFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RootFeature");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFmRootFeatureFmValueKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAnnotationAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAnnotationAnnotationParserRuleCall_3_0 = (RuleCall)cAnnotationAssignment_3.eContents().get(0);
		private final Assignment cContainsRelationAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cContainsRelationRelationshipParserRuleCall_4_0 = (RuleCall)cContainsRelationAssignment_4.eContents().get(0);
		private final Assignment cContainsFeatureAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cContainsFeatureFeatureParserRuleCall_5_0 = (RuleCall)cContainsFeatureAssignment_5.eContents().get(0);
		private final Keyword cFmRootFeatureKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//RootFeature:
		//	"<fm:RootFeature fm:value=" name=STRING ">" annotation+=Annotation* containsRelation+=Relationship*
		//	containsFeature+=Feature* "</fm:RootFeature>";
		public ParserRule getRule() { return rule; }

		//"<fm:RootFeature fm:value=" name=STRING ">" annotation+=Annotation* containsRelation+=Relationship*
		//containsFeature+=Feature* "</fm:RootFeature>"
		public Group getGroup() { return cGroup; }

		//"<fm:RootFeature fm:value="
		public Keyword getFmRootFeatureFmValueKeyword_0() { return cFmRootFeatureFmValueKeyword_0; }

		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_2() { return cGreaterThanSignKeyword_2; }

		//annotation+=Annotation*
		public Assignment getAnnotationAssignment_3() { return cAnnotationAssignment_3; }

		//Annotation
		public RuleCall getAnnotationAnnotationParserRuleCall_3_0() { return cAnnotationAnnotationParserRuleCall_3_0; }

		//containsRelation+=Relationship*
		public Assignment getContainsRelationAssignment_4() { return cContainsRelationAssignment_4; }

		//Relationship
		public RuleCall getContainsRelationRelationshipParserRuleCall_4_0() { return cContainsRelationRelationshipParserRuleCall_4_0; }

		//containsFeature+=Feature*
		public Assignment getContainsFeatureAssignment_5() { return cContainsFeatureAssignment_5; }

		//Feature
		public RuleCall getContainsFeatureFeatureParserRuleCall_5_0() { return cContainsFeatureFeatureParserRuleCall_5_0; }

		//"</fm:RootFeature>"
		public Keyword getFmRootFeatureKeyword_6() { return cFmRootFeatureKeyword_6; }
	}

	public class AnnotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Annotation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFmAnnotationFmValueAnnotationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cFmDescriptionFmValueKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		private final Keyword cSolidusGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cFmAnnotationKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Annotation:
		//	"<fm:Annotation fm:value=\"Annotation\">" "<fm:Description fm:value=" description=STRING "/>" "</fm:Annotation>";
		public ParserRule getRule() { return rule; }

		//"<fm:Annotation fm:value=\"Annotation\">" "<fm:Description fm:value=" description=STRING "/>" "</fm:Annotation>"
		public Group getGroup() { return cGroup; }

		//"<fm:Annotation fm:value=\"Annotation\">"
		public Keyword getFmAnnotationFmValueAnnotationKeyword_0() { return cFmAnnotationFmValueAnnotationKeyword_0; }

		//"<fm:Description fm:value="
		public Keyword getFmDescriptionFmValueKeyword_1() { return cFmDescriptionFmValueKeyword_1; }

		//description=STRING
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }

		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_2_0() { return cDescriptionSTRINGTerminalRuleCall_2_0; }

		//"/>"
		public Keyword getSolidusGreaterThanSignKeyword_3() { return cSolidusGreaterThanSignKeyword_3; }

		//"</fm:Annotation>"
		public Keyword getFmAnnotationKeyword_4() { return cFmAnnotationKeyword_4; }
	}

	public class RelationshipElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Relationship");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMandatoryParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOptionalParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAlternativeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cInclusive_OrParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cGroupCardinalityParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Relationship:
		//	Mandatory | Optional | Alternative | Inclusive_Or | GroupCardinality;
		public ParserRule getRule() { return rule; }

		//Mandatory | Optional | Alternative | Inclusive_Or | GroupCardinality
		public Alternatives getAlternatives() { return cAlternatives; }

		//Mandatory
		public RuleCall getMandatoryParserRuleCall_0() { return cMandatoryParserRuleCall_0; }

		//Optional
		public RuleCall getOptionalParserRuleCall_1() { return cOptionalParserRuleCall_1; }

		//Alternative
		public RuleCall getAlternativeParserRuleCall_2() { return cAlternativeParserRuleCall_2; }

		//Inclusive_Or
		public RuleCall getInclusive_OrParserRuleCall_3() { return cInclusive_OrParserRuleCall_3; }

		//GroupCardinality
		public RuleCall getGroupCardinalityParserRuleCall_4() { return cGroupCardinalityParserRuleCall_4; }
	}

	public class MandatoryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Mandatory");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cMandatoryAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cFmCardinalityFmCardMaxKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Keyword cQuotationMarkDigitOneQuotationMarkKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Keyword cFmCardMinKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Keyword cQuotationMarkDigitOneQuotationMarkKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Keyword cSolidusGreaterThanSignKeyword_0_5 = (Keyword)cGroup_0.eContents().get(5);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cFmCardinalityFmCardMaxKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cCardinalityMaxAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cCardinalityMaxSTRINGTerminalRuleCall_1_1_0 = (RuleCall)cCardinalityMaxAssignment_1_1.eContents().get(0);
		private final Keyword cFmCardMinKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cCardinalityMinAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final Keyword cCardinalityMin1Keyword_1_3_0 = (Keyword)cCardinalityMinAssignment_1_3.eContents().get(0);
		private final Keyword cSolidusGreaterThanSignKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		
		//Mandatory:
		//	{Mandatory} "<fm:Cardinality fm:cardMax=" "\"1\"" "fm:cardMin=" "\"1\"" "/>" | "<fm:Cardinality fm:cardMax="
		//	cardinalityMax=STRING "fm:cardMin=" cardinalityMin="1" "/>";
		public ParserRule getRule() { return rule; }

		//{Mandatory} "<fm:Cardinality fm:cardMax=" "\"1\"" "fm:cardMin=" "\"1\"" "/>" | "<fm:Cardinality fm:cardMax="
		//cardinalityMax=STRING "fm:cardMin=" cardinalityMin="1" "/>"
		public Alternatives getAlternatives() { return cAlternatives; }

		//{Mandatory} "<fm:Cardinality fm:cardMax=" "\"1\"" "fm:cardMin=" "\"1\"" "/>"
		public Group getGroup_0() { return cGroup_0; }

		//{Mandatory}
		public Action getMandatoryAction_0_0() { return cMandatoryAction_0_0; }

		//"<fm:Cardinality fm:cardMax="
		public Keyword getFmCardinalityFmCardMaxKeyword_0_1() { return cFmCardinalityFmCardMaxKeyword_0_1; }

		//"\"1\""
		public Keyword getQuotationMarkDigitOneQuotationMarkKeyword_0_2() { return cQuotationMarkDigitOneQuotationMarkKeyword_0_2; }

		//"fm:cardMin="
		public Keyword getFmCardMinKeyword_0_3() { return cFmCardMinKeyword_0_3; }

		//"\"1\""
		public Keyword getQuotationMarkDigitOneQuotationMarkKeyword_0_4() { return cQuotationMarkDigitOneQuotationMarkKeyword_0_4; }

		//"/>"
		public Keyword getSolidusGreaterThanSignKeyword_0_5() { return cSolidusGreaterThanSignKeyword_0_5; }

		//"<fm:Cardinality fm:cardMax=" cardinalityMax=STRING "fm:cardMin=" cardinalityMin="1" "/>"
		public Group getGroup_1() { return cGroup_1; }

		//"<fm:Cardinality fm:cardMax="
		public Keyword getFmCardinalityFmCardMaxKeyword_1_0() { return cFmCardinalityFmCardMaxKeyword_1_0; }

		//cardinalityMax=STRING
		public Assignment getCardinalityMaxAssignment_1_1() { return cCardinalityMaxAssignment_1_1; }

		//STRING
		public RuleCall getCardinalityMaxSTRINGTerminalRuleCall_1_1_0() { return cCardinalityMaxSTRINGTerminalRuleCall_1_1_0; }

		//"fm:cardMin="
		public Keyword getFmCardMinKeyword_1_2() { return cFmCardMinKeyword_1_2; }

		//cardinalityMin="1"
		public Assignment getCardinalityMinAssignment_1_3() { return cCardinalityMinAssignment_1_3; }

		//"1"
		public Keyword getCardinalityMin1Keyword_1_3_0() { return cCardinalityMin1Keyword_1_3_0; }

		//"/>"
		public Keyword getSolidusGreaterThanSignKeyword_1_4() { return cSolidusGreaterThanSignKeyword_1_4; }
	}

	public class OptionalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Optional");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cOptionalAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cFmCardinalityFmCardMaxKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Keyword cQuotationMarkDigitOneQuotationMarkKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Keyword cFmCardMinKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Keyword cQuotationMarkDigitZeroQuotationMarkKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Keyword cSolidusGreaterThanSignKeyword_0_5 = (Keyword)cGroup_0.eContents().get(5);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cFmCardinalityFmCardMaxKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cCardinalityMaxAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cCardinalityMaxSTRINGTerminalRuleCall_1_1_0 = (RuleCall)cCardinalityMaxAssignment_1_1.eContents().get(0);
		private final Keyword cFmCardMinKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cCardinalityMinAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final Keyword cCardinalityMin0Keyword_1_3_0 = (Keyword)cCardinalityMinAssignment_1_3.eContents().get(0);
		private final Keyword cSolidusGreaterThanSignKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		
		//Optional:
		//	{Optional} "<fm:Cardinality fm:cardMax=" "\"1\"" "fm:cardMin=" "\"0\"" "/>" | "<fm:Cardinality fm:cardMax="
		//	cardinalityMax=STRING "fm:cardMin=" cardinalityMin="0" "/>";
		public ParserRule getRule() { return rule; }

		//{Optional} "<fm:Cardinality fm:cardMax=" "\"1\"" "fm:cardMin=" "\"0\"" "/>" | "<fm:Cardinality fm:cardMax="
		//cardinalityMax=STRING "fm:cardMin=" cardinalityMin="0" "/>"
		public Alternatives getAlternatives() { return cAlternatives; }

		//{Optional} "<fm:Cardinality fm:cardMax=" "\"1\"" "fm:cardMin=" "\"0\"" "/>"
		public Group getGroup_0() { return cGroup_0; }

		//{Optional}
		public Action getOptionalAction_0_0() { return cOptionalAction_0_0; }

		//"<fm:Cardinality fm:cardMax="
		public Keyword getFmCardinalityFmCardMaxKeyword_0_1() { return cFmCardinalityFmCardMaxKeyword_0_1; }

		//"\"1\""
		public Keyword getQuotationMarkDigitOneQuotationMarkKeyword_0_2() { return cQuotationMarkDigitOneQuotationMarkKeyword_0_2; }

		//"fm:cardMin="
		public Keyword getFmCardMinKeyword_0_3() { return cFmCardMinKeyword_0_3; }

		//"\"0\""
		public Keyword getQuotationMarkDigitZeroQuotationMarkKeyword_0_4() { return cQuotationMarkDigitZeroQuotationMarkKeyword_0_4; }

		//"/>"
		public Keyword getSolidusGreaterThanSignKeyword_0_5() { return cSolidusGreaterThanSignKeyword_0_5; }

		//"<fm:Cardinality fm:cardMax=" cardinalityMax=STRING "fm:cardMin=" cardinalityMin="0" "/>"
		public Group getGroup_1() { return cGroup_1; }

		//"<fm:Cardinality fm:cardMax="
		public Keyword getFmCardinalityFmCardMaxKeyword_1_0() { return cFmCardinalityFmCardMaxKeyword_1_0; }

		//cardinalityMax=STRING
		public Assignment getCardinalityMaxAssignment_1_1() { return cCardinalityMaxAssignment_1_1; }

		//STRING
		public RuleCall getCardinalityMaxSTRINGTerminalRuleCall_1_1_0() { return cCardinalityMaxSTRINGTerminalRuleCall_1_1_0; }

		//"fm:cardMin="
		public Keyword getFmCardMinKeyword_1_2() { return cFmCardMinKeyword_1_2; }

		//cardinalityMin="0"
		public Assignment getCardinalityMinAssignment_1_3() { return cCardinalityMinAssignment_1_3; }

		//"0"
		public Keyword getCardinalityMin0Keyword_1_3_0() { return cCardinalityMin0Keyword_1_3_0; }

		//"/>"
		public Keyword getSolidusGreaterThanSignKeyword_1_4() { return cSolidusGreaterThanSignKeyword_1_4; }
	}

	public class AlternativeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Alternative");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAlternativeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cFmCardinalityAlternativeFmCardMax1FmCardMin1Keyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Alternative:
		//	{Alternative} "<fm:CardinalityAlternative fm:cardMax=\"1\" fm:cardMin=\"1\"/>";
		public ParserRule getRule() { return rule; }

		//{Alternative} "<fm:CardinalityAlternative fm:cardMax=\"1\" fm:cardMin=\"1\"/>"
		public Group getGroup() { return cGroup; }

		//{Alternative}
		public Action getAlternativeAction_0() { return cAlternativeAction_0; }

		//"<fm:CardinalityAlternative fm:cardMax=\"1\" fm:cardMin=\"1\"/>"
		public Keyword getFmCardinalityAlternativeFmCardMax1FmCardMin1Keyword_1() { return cFmCardinalityAlternativeFmCardMax1FmCardMin1Keyword_1; }
	}

	public class Inclusive_OrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Inclusive_Or");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInclusive_OrAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cFmCardinalityInclusiveOrFmCardMaxNFmCardMin1Keyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cFmCardinalityInclusiveOrFmCardMaxFmCardMin1Keyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		
		//Inclusive_Or:
		//	{Inclusive_Or} ("<fm:CardinalityInclusiveOr fm:cardMax=\"n\" fm:cardMin=\"1\"/>" |
		//	"<fm:CardinalityInclusiveOr fm:cardMax=\"*\" fm:cardMin=\"1\"/>");
		public ParserRule getRule() { return rule; }

		//{Inclusive_Or} ("<fm:CardinalityInclusiveOr fm:cardMax=\"n\" fm:cardMin=\"1\"/>" |
		//"<fm:CardinalityInclusiveOr fm:cardMax=\"*\" fm:cardMin=\"1\"/>")
		public Group getGroup() { return cGroup; }

		//{Inclusive_Or}
		public Action getInclusive_OrAction_0() { return cInclusive_OrAction_0; }

		//"<fm:CardinalityInclusiveOr fm:cardMax=\"n\" fm:cardMin=\"1\"/>" |
		//"<fm:CardinalityInclusiveOr fm:cardMax=\"*\" fm:cardMin=\"1\"/>"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"<fm:CardinalityInclusiveOr fm:cardMax=\"n\" fm:cardMin=\"1\"/>"
		public Keyword getFmCardinalityInclusiveOrFmCardMaxNFmCardMin1Keyword_1_0() { return cFmCardinalityInclusiveOrFmCardMaxNFmCardMin1Keyword_1_0; }

		//"<fm:CardinalityInclusiveOr fm:cardMax=\"*\" fm:cardMin=\"1\"/>"
		public Keyword getFmCardinalityInclusiveOrFmCardMaxFmCardMin1Keyword_1_1() { return cFmCardinalityInclusiveOrFmCardMaxFmCardMin1Keyword_1_1; }
	}

	public class GroupCardinalityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GroupCardinality");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFmFeatureGroupFmValueFeatureGroupKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cFmCardinalityFmCardMaxKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCardinalityMaxAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCardinalityMaxSTRINGTerminalRuleCall_2_0 = (RuleCall)cCardinalityMaxAssignment_2.eContents().get(0);
		private final Keyword cFmCardMinKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cCardinalityMinAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cCardinalityMinSTRINGTerminalRuleCall_4_0 = (RuleCall)cCardinalityMinAssignment_4.eContents().get(0);
		private final Keyword cSolidusGreaterThanSignKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cFmGroupedFeaturesFmValueKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cTargetAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final CrossReference cTargetGroupedFeatureCrossReference_7_0 = (CrossReference)cTargetAssignment_7.eContents().get(0);
		private final RuleCall cTargetGroupedFeatureSTRINGTerminalRuleCall_7_0_1 = (RuleCall)cTargetGroupedFeatureCrossReference_7_0.eContents().get(1);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cCommaKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cTargetAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final CrossReference cTargetGroupedFeatureCrossReference_8_1_0 = (CrossReference)cTargetAssignment_8_1.eContents().get(0);
		private final RuleCall cTargetGroupedFeatureSTRINGTerminalRuleCall_8_1_0_1 = (RuleCall)cTargetGroupedFeatureCrossReference_8_1_0.eContents().get(1);
		private final Keyword cSolidusGreaterThanSignKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//GroupCardinality:
		//	"<fm:FeatureGroup fm:value=\"FeatureGroup\">" "<fm:Cardinality fm:cardMax=" cardinalityMax=STRING "fm:cardMin="
		//	cardinalityMin=STRING "/>" "<fm:GroupedFeatures fm:value=" target+=[GroupedFeature|STRING] (","
		//	target+=[GroupedFeature|STRING])* "/>";
		public ParserRule getRule() { return rule; }

		//"<fm:FeatureGroup fm:value=\"FeatureGroup\">" "<fm:Cardinality fm:cardMax=" cardinalityMax=STRING "fm:cardMin="
		//cardinalityMin=STRING "/>" "<fm:GroupedFeatures fm:value=" target+=[GroupedFeature|STRING] (","
		//target+=[GroupedFeature|STRING])* "/>"
		public Group getGroup() { return cGroup; }

		//"<fm:FeatureGroup fm:value=\"FeatureGroup\">"
		public Keyword getFmFeatureGroupFmValueFeatureGroupKeyword_0() { return cFmFeatureGroupFmValueFeatureGroupKeyword_0; }

		//"<fm:Cardinality fm:cardMax="
		public Keyword getFmCardinalityFmCardMaxKeyword_1() { return cFmCardinalityFmCardMaxKeyword_1; }

		//cardinalityMax=STRING
		public Assignment getCardinalityMaxAssignment_2() { return cCardinalityMaxAssignment_2; }

		//STRING
		public RuleCall getCardinalityMaxSTRINGTerminalRuleCall_2_0() { return cCardinalityMaxSTRINGTerminalRuleCall_2_0; }

		//"fm:cardMin="
		public Keyword getFmCardMinKeyword_3() { return cFmCardMinKeyword_3; }

		//cardinalityMin=STRING
		public Assignment getCardinalityMinAssignment_4() { return cCardinalityMinAssignment_4; }

		//STRING
		public RuleCall getCardinalityMinSTRINGTerminalRuleCall_4_0() { return cCardinalityMinSTRINGTerminalRuleCall_4_0; }

		//"/>"
		public Keyword getSolidusGreaterThanSignKeyword_5() { return cSolidusGreaterThanSignKeyword_5; }

		//"<fm:GroupedFeatures fm:value="
		public Keyword getFmGroupedFeaturesFmValueKeyword_6() { return cFmGroupedFeaturesFmValueKeyword_6; }

		//target+=[GroupedFeature|STRING]
		public Assignment getTargetAssignment_7() { return cTargetAssignment_7; }

		//[GroupedFeature|STRING]
		public CrossReference getTargetGroupedFeatureCrossReference_7_0() { return cTargetGroupedFeatureCrossReference_7_0; }

		//STRING
		public RuleCall getTargetGroupedFeatureSTRINGTerminalRuleCall_7_0_1() { return cTargetGroupedFeatureSTRINGTerminalRuleCall_7_0_1; }

		//("," target+=[GroupedFeature|STRING])*
		public Group getGroup_8() { return cGroup_8; }

		//","
		public Keyword getCommaKeyword_8_0() { return cCommaKeyword_8_0; }

		//target+=[GroupedFeature|STRING]
		public Assignment getTargetAssignment_8_1() { return cTargetAssignment_8_1; }

		//[GroupedFeature|STRING]
		public CrossReference getTargetGroupedFeatureCrossReference_8_1_0() { return cTargetGroupedFeatureCrossReference_8_1_0; }

		//STRING
		public RuleCall getTargetGroupedFeatureSTRINGTerminalRuleCall_8_1_0_1() { return cTargetGroupedFeatureSTRINGTerminalRuleCall_8_1_0_1; }

		//"/>"
		public Keyword getSolidusGreaterThanSignKeyword_9() { return cSolidusGreaterThanSignKeyword_9; }
	}

	public class FeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Feature");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFeature_ImplParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cReferenceFeatureParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cGroupedFeatureParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cGroupedReferenceParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Feature:
		//	Feature_Impl | ReferenceFeature | GroupedFeature | GroupedReference;
		public ParserRule getRule() { return rule; }

		//Feature_Impl | ReferenceFeature | GroupedFeature | GroupedReference
		public Alternatives getAlternatives() { return cAlternatives; }

		//Feature_Impl
		public RuleCall getFeature_ImplParserRuleCall_0() { return cFeature_ImplParserRuleCall_0; }

		//ReferenceFeature
		public RuleCall getReferenceFeatureParserRuleCall_1() { return cReferenceFeatureParserRuleCall_1; }

		//GroupedFeature
		public RuleCall getGroupedFeatureParserRuleCall_2() { return cGroupedFeatureParserRuleCall_2; }

		//GroupedReference
		public RuleCall getGroupedReferenceParserRuleCall_3() { return cGroupedReferenceParserRuleCall_3; }
	}

	public class Feature_ImplElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Feature_Impl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFmSolitaryFeatureFmValueKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAnnotationAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAnnotationAnnotationParserRuleCall_3_0 = (RuleCall)cAnnotationAssignment_3.eContents().get(0);
		private final Assignment cContainsRelationAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cContainsRelationRelationshipParserRuleCall_4_0 = (RuleCall)cContainsRelationAssignment_4.eContents().get(0);
		private final Assignment cContainsFeatureAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cContainsFeatureFeatureParserRuleCall_5_0 = (RuleCall)cContainsFeatureAssignment_5.eContents().get(0);
		private final Keyword cFmSolitaryFeatureKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Feature_Impl returns Feature:
		//	"<fm:SolitaryFeature fm:value=" name=STRING ">" annotation+=Annotation* containsRelation+=Relationship*
		//	containsFeature+=Feature* "</fm:SolitaryFeature>";
		public ParserRule getRule() { return rule; }

		//"<fm:SolitaryFeature fm:value=" name=STRING ">" annotation+=Annotation* containsRelation+=Relationship*
		//containsFeature+=Feature* "</fm:SolitaryFeature>"
		public Group getGroup() { return cGroup; }

		//"<fm:SolitaryFeature fm:value="
		public Keyword getFmSolitaryFeatureFmValueKeyword_0() { return cFmSolitaryFeatureFmValueKeyword_0; }

		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_2() { return cGreaterThanSignKeyword_2; }

		//annotation+=Annotation*
		public Assignment getAnnotationAssignment_3() { return cAnnotationAssignment_3; }

		//Annotation
		public RuleCall getAnnotationAnnotationParserRuleCall_3_0() { return cAnnotationAnnotationParserRuleCall_3_0; }

		//containsRelation+=Relationship*
		public Assignment getContainsRelationAssignment_4() { return cContainsRelationAssignment_4; }

		//Relationship
		public RuleCall getContainsRelationRelationshipParserRuleCall_4_0() { return cContainsRelationRelationshipParserRuleCall_4_0; }

		//containsFeature+=Feature*
		public Assignment getContainsFeatureAssignment_5() { return cContainsFeatureAssignment_5; }

		//Feature
		public RuleCall getContainsFeatureFeatureParserRuleCall_5_0() { return cContainsFeatureFeatureParserRuleCall_5_0; }

		//"</fm:SolitaryFeature>"
		public Keyword getFmSolitaryFeatureKeyword_6() { return cFmSolitaryFeatureKeyword_6; }
	}

	public class ReferenceFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ReferenceFeature");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFmSolitaryReferenceFmValueKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAnnotationAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAnnotationAnnotationParserRuleCall_3_0 = (RuleCall)cAnnotationAssignment_3.eContents().get(0);
		private final Assignment cContainsRelationAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cContainsRelationRelationshipParserRuleCall_4_0 = (RuleCall)cContainsRelationAssignment_4.eContents().get(0);
		private final Assignment cContainsFeatureAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cContainsFeatureFeatureParserRuleCall_5_0 = (RuleCall)cContainsFeatureAssignment_5.eContents().get(0);
		private final Keyword cFmSolitaryReferenceKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//ReferenceFeature:
		//	"<fm:SolitaryReference fm:value=" name=STRING ">" annotation+=Annotation* containsRelation+=Relationship*
		//	containsFeature+=Feature* "</fm:SolitaryReference>";
		public ParserRule getRule() { return rule; }

		//"<fm:SolitaryReference fm:value=" name=STRING ">" annotation+=Annotation* containsRelation+=Relationship*
		//containsFeature+=Feature* "</fm:SolitaryReference>"
		public Group getGroup() { return cGroup; }

		//"<fm:SolitaryReference fm:value="
		public Keyword getFmSolitaryReferenceFmValueKeyword_0() { return cFmSolitaryReferenceFmValueKeyword_0; }

		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_2() { return cGreaterThanSignKeyword_2; }

		//annotation+=Annotation*
		public Assignment getAnnotationAssignment_3() { return cAnnotationAssignment_3; }

		//Annotation
		public RuleCall getAnnotationAnnotationParserRuleCall_3_0() { return cAnnotationAnnotationParserRuleCall_3_0; }

		//containsRelation+=Relationship*
		public Assignment getContainsRelationAssignment_4() { return cContainsRelationAssignment_4; }

		//Relationship
		public RuleCall getContainsRelationRelationshipParserRuleCall_4_0() { return cContainsRelationRelationshipParserRuleCall_4_0; }

		//containsFeature+=Feature*
		public Assignment getContainsFeatureAssignment_5() { return cContainsFeatureAssignment_5; }

		//Feature
		public RuleCall getContainsFeatureFeatureParserRuleCall_5_0() { return cContainsFeatureFeatureParserRuleCall_5_0; }

		//"</fm:SolitaryReference>"
		public Keyword getFmSolitaryReferenceKeyword_6() { return cFmSolitaryReferenceKeyword_6; }
	}

	public class GroupedFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GroupedFeature");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFmGroupedFeatureFmValueKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cContainsRelationAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cContainsRelationRelationshipParserRuleCall_3_0 = (RuleCall)cContainsRelationAssignment_3.eContents().get(0);
		private final Assignment cAnnotationAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cAnnotationAnnotationParserRuleCall_4_0 = (RuleCall)cAnnotationAssignment_4.eContents().get(0);
		private final Assignment cContainsFeatureAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cContainsFeatureFeatureParserRuleCall_5_0 = (RuleCall)cContainsFeatureAssignment_5.eContents().get(0);
		private final Keyword cFmGroupedFeatureKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cFmFeatureGroupKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//GroupedFeature:
		//	"<fm:GroupedFeature fm:value=" name=STRING ">" containsRelation+=Relationship* annotation+=Annotation*
		//	containsFeature+=Feature* "</fm:GroupedFeature>" "</fm:FeatureGroup>"?;
		public ParserRule getRule() { return rule; }

		//"<fm:GroupedFeature fm:value=" name=STRING ">" containsRelation+=Relationship* annotation+=Annotation*
		//containsFeature+=Feature* "</fm:GroupedFeature>" "</fm:FeatureGroup>"?
		public Group getGroup() { return cGroup; }

		//"<fm:GroupedFeature fm:value="
		public Keyword getFmGroupedFeatureFmValueKeyword_0() { return cFmGroupedFeatureFmValueKeyword_0; }

		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_2() { return cGreaterThanSignKeyword_2; }

		//containsRelation+=Relationship*
		public Assignment getContainsRelationAssignment_3() { return cContainsRelationAssignment_3; }

		//Relationship
		public RuleCall getContainsRelationRelationshipParserRuleCall_3_0() { return cContainsRelationRelationshipParserRuleCall_3_0; }

		//annotation+=Annotation*
		public Assignment getAnnotationAssignment_4() { return cAnnotationAssignment_4; }

		//Annotation
		public RuleCall getAnnotationAnnotationParserRuleCall_4_0() { return cAnnotationAnnotationParserRuleCall_4_0; }

		//containsFeature+=Feature*
		public Assignment getContainsFeatureAssignment_5() { return cContainsFeatureAssignment_5; }

		//Feature
		public RuleCall getContainsFeatureFeatureParserRuleCall_5_0() { return cContainsFeatureFeatureParserRuleCall_5_0; }

		//"</fm:GroupedFeature>"
		public Keyword getFmGroupedFeatureKeyword_6() { return cFmGroupedFeatureKeyword_6; }

		//"</fm:FeatureGroup>"?
		public Keyword getFmFeatureGroupKeyword_7() { return cFmFeatureGroupKeyword_7; }
	}

	public class GroupedReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GroupedReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFmGroupedReferenceFmValueKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cContainsRelationAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cContainsRelationRelationshipParserRuleCall_3_0 = (RuleCall)cContainsRelationAssignment_3.eContents().get(0);
		private final Assignment cAnnotationAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cAnnotationAnnotationParserRuleCall_4_0 = (RuleCall)cAnnotationAssignment_4.eContents().get(0);
		private final Assignment cContainsFeatureAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cContainsFeatureFeatureParserRuleCall_5_0 = (RuleCall)cContainsFeatureAssignment_5.eContents().get(0);
		private final Keyword cFmGroupedReferenceKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cFmFeatureGroupKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//GroupedReference:
		//	"<fm:GroupedReference fm:value=" name=STRING ">" containsRelation+=Relationship* annotation+=Annotation*
		//	containsFeature+=Feature* "</fm:GroupedReference>" "</fm:FeatureGroup>"?;
		public ParserRule getRule() { return rule; }

		//"<fm:GroupedReference fm:value=" name=STRING ">" containsRelation+=Relationship* annotation+=Annotation*
		//containsFeature+=Feature* "</fm:GroupedReference>" "</fm:FeatureGroup>"?
		public Group getGroup() { return cGroup; }

		//"<fm:GroupedReference fm:value="
		public Keyword getFmGroupedReferenceFmValueKeyword_0() { return cFmGroupedReferenceFmValueKeyword_0; }

		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_2() { return cGreaterThanSignKeyword_2; }

		//containsRelation+=Relationship*
		public Assignment getContainsRelationAssignment_3() { return cContainsRelationAssignment_3; }

		//Relationship
		public RuleCall getContainsRelationRelationshipParserRuleCall_3_0() { return cContainsRelationRelationshipParserRuleCall_3_0; }

		//annotation+=Annotation*
		public Assignment getAnnotationAssignment_4() { return cAnnotationAssignment_4; }

		//Annotation
		public RuleCall getAnnotationAnnotationParserRuleCall_4_0() { return cAnnotationAnnotationParserRuleCall_4_0; }

		//containsFeature+=Feature*
		public Assignment getContainsFeatureAssignment_5() { return cContainsFeatureAssignment_5; }

		//Feature
		public RuleCall getContainsFeatureFeatureParserRuleCall_5_0() { return cContainsFeatureFeatureParserRuleCall_5_0; }

		//"</fm:GroupedReference>"
		public Keyword getFmGroupedReferenceKeyword_6() { return cFmGroupedReferenceKeyword_6; }

		//"</fm:FeatureGroup>"?
		public Keyword getFmFeatureGroupKeyword_7() { return cFmFeatureGroupKeyword_7; }
	}
	
	
	private FeatureModelElements pFeatureModel;
	private RootFeatureElements pRootFeature;
	private AnnotationElements pAnnotation;
	private RelationshipElements pRelationship;
	private MandatoryElements pMandatory;
	private OptionalElements pOptional;
	private AlternativeElements pAlternative;
	private Inclusive_OrElements pInclusive_Or;
	private GroupCardinalityElements pGroupCardinality;
	private FeatureElements pFeature;
	private Feature_ImplElements pFeature_Impl;
	private ReferenceFeatureElements pReferenceFeature;
	private GroupedFeatureElements pGroupedFeature;
	private GroupedReferenceElements pGroupedReference;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public FeatureModelGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//FeatureModel:
	//	"<?xml version=\"1.0\" encoding=\"UTF-8\"?>" "<fm:FeatureModel fm:value=\"FeatureModel\""
	//	"xmlns:fm=\"http://www.pnp-software.com/XFeature/fmm\"" "xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\""
	//	"xsi:schemaLocation=\"http://www.pnp-software.com/XFeature/fmm ./FeatureModel.xfmm\">" containsRoot+=RootFeature+
	//	"</fm:FeatureModel>";
	public FeatureModelElements getFeatureModelAccess() {
		return (pFeatureModel != null) ? pFeatureModel : (pFeatureModel = new FeatureModelElements());
	}
	
	public ParserRule getFeatureModelRule() {
		return getFeatureModelAccess().getRule();
	}

	//RootFeature:
	//	"<fm:RootFeature fm:value=" name=STRING ">" annotation+=Annotation* containsRelation+=Relationship*
	//	containsFeature+=Feature* "</fm:RootFeature>";
	public RootFeatureElements getRootFeatureAccess() {
		return (pRootFeature != null) ? pRootFeature : (pRootFeature = new RootFeatureElements());
	}
	
	public ParserRule getRootFeatureRule() {
		return getRootFeatureAccess().getRule();
	}

	//Annotation:
	//	"<fm:Annotation fm:value=\"Annotation\">" "<fm:Description fm:value=" description=STRING "/>" "</fm:Annotation>";
	public AnnotationElements getAnnotationAccess() {
		return (pAnnotation != null) ? pAnnotation : (pAnnotation = new AnnotationElements());
	}
	
	public ParserRule getAnnotationRule() {
		return getAnnotationAccess().getRule();
	}

	//Relationship:
	//	Mandatory | Optional | Alternative | Inclusive_Or | GroupCardinality;
	public RelationshipElements getRelationshipAccess() {
		return (pRelationship != null) ? pRelationship : (pRelationship = new RelationshipElements());
	}
	
	public ParserRule getRelationshipRule() {
		return getRelationshipAccess().getRule();
	}

	//Mandatory:
	//	{Mandatory} "<fm:Cardinality fm:cardMax=" "\"1\"" "fm:cardMin=" "\"1\"" "/>" | "<fm:Cardinality fm:cardMax="
	//	cardinalityMax=STRING "fm:cardMin=" cardinalityMin="1" "/>";
	public MandatoryElements getMandatoryAccess() {
		return (pMandatory != null) ? pMandatory : (pMandatory = new MandatoryElements());
	}
	
	public ParserRule getMandatoryRule() {
		return getMandatoryAccess().getRule();
	}

	//Optional:
	//	{Optional} "<fm:Cardinality fm:cardMax=" "\"1\"" "fm:cardMin=" "\"0\"" "/>" | "<fm:Cardinality fm:cardMax="
	//	cardinalityMax=STRING "fm:cardMin=" cardinalityMin="0" "/>";
	public OptionalElements getOptionalAccess() {
		return (pOptional != null) ? pOptional : (pOptional = new OptionalElements());
	}
	
	public ParserRule getOptionalRule() {
		return getOptionalAccess().getRule();
	}

	//Alternative:
	//	{Alternative} "<fm:CardinalityAlternative fm:cardMax=\"1\" fm:cardMin=\"1\"/>";
	public AlternativeElements getAlternativeAccess() {
		return (pAlternative != null) ? pAlternative : (pAlternative = new AlternativeElements());
	}
	
	public ParserRule getAlternativeRule() {
		return getAlternativeAccess().getRule();
	}

	//Inclusive_Or:
	//	{Inclusive_Or} ("<fm:CardinalityInclusiveOr fm:cardMax=\"n\" fm:cardMin=\"1\"/>" |
	//	"<fm:CardinalityInclusiveOr fm:cardMax=\"*\" fm:cardMin=\"1\"/>");
	public Inclusive_OrElements getInclusive_OrAccess() {
		return (pInclusive_Or != null) ? pInclusive_Or : (pInclusive_Or = new Inclusive_OrElements());
	}
	
	public ParserRule getInclusive_OrRule() {
		return getInclusive_OrAccess().getRule();
	}

	//GroupCardinality:
	//	"<fm:FeatureGroup fm:value=\"FeatureGroup\">" "<fm:Cardinality fm:cardMax=" cardinalityMax=STRING "fm:cardMin="
	//	cardinalityMin=STRING "/>" "<fm:GroupedFeatures fm:value=" target+=[GroupedFeature|STRING] (","
	//	target+=[GroupedFeature|STRING])* "/>";
	public GroupCardinalityElements getGroupCardinalityAccess() {
		return (pGroupCardinality != null) ? pGroupCardinality : (pGroupCardinality = new GroupCardinalityElements());
	}
	
	public ParserRule getGroupCardinalityRule() {
		return getGroupCardinalityAccess().getRule();
	}

	//Feature:
	//	Feature_Impl | ReferenceFeature | GroupedFeature | GroupedReference;
	public FeatureElements getFeatureAccess() {
		return (pFeature != null) ? pFeature : (pFeature = new FeatureElements());
	}
	
	public ParserRule getFeatureRule() {
		return getFeatureAccess().getRule();
	}

	//Feature_Impl returns Feature:
	//	"<fm:SolitaryFeature fm:value=" name=STRING ">" annotation+=Annotation* containsRelation+=Relationship*
	//	containsFeature+=Feature* "</fm:SolitaryFeature>";
	public Feature_ImplElements getFeature_ImplAccess() {
		return (pFeature_Impl != null) ? pFeature_Impl : (pFeature_Impl = new Feature_ImplElements());
	}
	
	public ParserRule getFeature_ImplRule() {
		return getFeature_ImplAccess().getRule();
	}

	//ReferenceFeature:
	//	"<fm:SolitaryReference fm:value=" name=STRING ">" annotation+=Annotation* containsRelation+=Relationship*
	//	containsFeature+=Feature* "</fm:SolitaryReference>";
	public ReferenceFeatureElements getReferenceFeatureAccess() {
		return (pReferenceFeature != null) ? pReferenceFeature : (pReferenceFeature = new ReferenceFeatureElements());
	}
	
	public ParserRule getReferenceFeatureRule() {
		return getReferenceFeatureAccess().getRule();
	}

	//GroupedFeature:
	//	"<fm:GroupedFeature fm:value=" name=STRING ">" containsRelation+=Relationship* annotation+=Annotation*
	//	containsFeature+=Feature* "</fm:GroupedFeature>" "</fm:FeatureGroup>"?;
	public GroupedFeatureElements getGroupedFeatureAccess() {
		return (pGroupedFeature != null) ? pGroupedFeature : (pGroupedFeature = new GroupedFeatureElements());
	}
	
	public ParserRule getGroupedFeatureRule() {
		return getGroupedFeatureAccess().getRule();
	}

	//GroupedReference:
	//	"<fm:GroupedReference fm:value=" name=STRING ">" containsRelation+=Relationship* annotation+=Annotation*
	//	containsFeature+=Feature* "</fm:GroupedReference>" "</fm:FeatureGroup>"?;
	public GroupedReferenceElements getGroupedReferenceAccess() {
		return (pGroupedReference != null) ? pGroupedReference : (pGroupedReference = new GroupedReferenceElements());
	}
	
	public ParserRule getGroupedReferenceRule() {
		return getGroupedReferenceAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
