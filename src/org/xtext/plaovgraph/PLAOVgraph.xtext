// automatically generated by Xtext
grammar org.xtext.plaovgraph.PLAOVgraph with org.eclipse.xtext.common.Terminals 

import "platform:/resource/PL-AOVgraph/model/PLAOVgraph.ecore" 

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Aspect_Oriented_Model returns Aspect_Oriented_Model:
	'Aspect_Oriented_Model'
	'{'
		'goalmodel' '{' goalmodel+=Goal_Model ( "," goalmodel+=Goal_Model)* '}' 
    '}';


Goal_Model returns Goal_Model:
	Goal_Model_Impl | Element;

Relationship returns Relationship:
	Contribution | Correlation | Crosscutting;

Property returns Property:
	IsFeature | Cardinality | GroupFeature | Generic_Property;

Goal_Model_Impl returns Goal_Model:
	{Goal_Model}
	'Goal_Model'
	name=EString
	'{'
		('element' '{' element+=Element ( "," element+=Element)* '}' )?
		('relationship' '{' relationship+=Relationship ( "," relationship+=Relationship)* '}' )?
		('property' '{' property+=Property ( "," property+=Property)* '}' )?
    '}';

EString returns ecore::EString:
	STRING | ID;

Element returns Element:
	'Element'
	name=EString
	'{'
		'type' type=ElementTypes
		('element' '{' element+=Element ( "," element+=Element)* '}' )?
		('relationship' '{' relationship+=Relationship ( "," relationship+=Relationship)* '}' )?
		('property' '{' property+=Property ( "," property+=Property)* '}' )?
    '}';

enum ElementTypes returns ElementTypes:
	task = 'task' | goal = 'goal' | softgoal = 'softgoal' | task_ref = 'task_ref' | goal_ref = 'goal_ref' | softgoal_ref = 'softgoal_ref';

Contribution returns Contribution:
	'Contribution'
	'{'
		'label' label=DecompositionCategory
		('source' source=[Goal_Model|EString])?
		('target' target=[Goal_Model|EString])?
    '}';

Correlation returns Correlation:
	'Correlation'
	'{'
		'label' label=CorrelationCategory
		('source' source=[Goal_Model|EString])?
		('target' target=[Goal_Model|EString])?
    '}';

Crosscutting returns Crosscutting:
	'Crosscutting'
	'{'
		('source' source=[Goal_Model|EString])?
		('target' target=[Goal_Model|EString])?
		'pointcut' '{' pointcut+=Pointcut ( "," pointcut+=Pointcut)* '}' 
		('advice' '{' advice+=Advice ( "," advice+=Advice)* '}' )?
		('intertype' '{' intertype+=IntertypeDeclaration ( "," intertype+=IntertypeDeclaration)* '}' )?
    '}';

enum DecompositionCategory returns DecompositionCategory:
	and = 'and' | or = 'or' | xor = 'xor' | inc_or = 'inc_or';

enum CorrelationCategory returns CorrelationCategory:
	make = 'make' | break = 'break' | help = 'help' | hurt = 'hurt' | unknown = 'unknown';

Pointcut returns Pointcut:
	'Pointcut'
	name=EString
	'{'
		'operand' '{' operand+=Operand ( "," operand+=Operand)* '}' 
    '}';

Advice returns Advice:
	'Advice'
	'{'
		'type' type=AdviceCategory
		('joinpointAdvice' '(' joinpointAdvice+=[Element|EString] ( "," joinpointAdvice+=[Element|EString])* ')' )?
		'idPointcut' '(' idPointcut+=[Pointcut|EString] ( "," idPointcut+=[Pointcut|EString])* ')' 
    '}';

IntertypeDeclaration returns IntertypeDeclaration:
	'IntertypeDeclaration'
	'{'
		'type' type=IntertypeCategory
		'idPointcut' '(' idPointcut+=[Pointcut|EString] ( "," idPointcut+=[Pointcut|EString])* ')' 
		('newElement' '{' newElement+=Element ( "," newElement+=Element)* '}' )?
		('newAttribute' '{' newAttribute+=Attribute ( "," newAttribute+=Attribute)* '}' )?
    '}';

Operand returns Operand:
	'Operand'
	'{'
		'primitive' primitive=PrimitiveTypes
		'joinpointPointcut' joinpointPointcut=[Element|EString]
		('operator' operator=Operator)?
    '}';

enum PrimitiveTypes returns PrimitiveTypes:
	include = 'include' | substitute = 'substitute';

Operator returns Operator:
	'Operator'
	'{'
		'operator' operator=OperatorTypes
    '}';

enum OperatorTypes returns OperatorTypes:
	and = 'and' | or = 'or' | not = 'not';

enum AdviceCategory returns AdviceCategory:
	around = 'around' | before = 'before' | after = 'after';

enum IntertypeCategory returns IntertypeCategory:
	element = 'element' | attribute = 'attribute';

Attribute returns Attribute:
	'Attribute'
	'{'
		'type' type=EString
		'value' value=EString
    '}';

IsFeature returns IsFeature:
	'IsFeature'
	'{'
		'label' label=IsFeatureTypes
    '}';

Cardinality returns Cardinality:
	'Cardinality'
	'{'
		'cardinalityMin' cardinalityMin=EString
		'cardinalityMax' cardinalityMax=EString
		('source' source=[Element|EString])?
		('target' target=[Goal_Model|EString])?
    '}';

GroupFeature returns GroupFeature:
	'GroupFeature'
	'{'
		'cardinalityGroupMin' cardinalityGroupMin=EString
		'cardinalityGroupMax' cardinalityGroupMax=EString
		'source' '(' source+=[Element|EString] ( "," source+=[Element|EString])* ')' 
		('target' target=[Goal_Model|EString])?
    '}';

Generic_Property returns Generic_Property:
	'Generic_Property'
	name=EString
	'{'
		'value' value=EString
    '}';

enum IsFeatureTypes returns IsFeatureTypes:
	no = 'no' | yes = 'yes';
